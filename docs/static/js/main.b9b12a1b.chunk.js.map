{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/Loader.js","components/GridGifs.js","hooks/useFetchGift.js","components/GitExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","busqueda","setBusqueda","onSubmit","e","preventDefault","length","cate","type","value","onChange","target","GifGridItem","id","title","imageUrl","className","src","alt","getGifs","category","a","url","encodeURI","fetch","resp","ok","status","statusText","json","data","image","map","img","images","downsized_medium","Loader","GridGifs","loading","error","state","setState","useEffect","then","catch","err","useFetchGift","GitExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"sNAgCeA,EA9BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACrB,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAkBA,OACE,sBAAMC,SAZa,SAACC,GACpBA,EAAEC,iBAIEJ,EAASK,OAAS,IACpBP,GAAc,SAACQ,GAAD,OAAWN,GAAX,mBAAuBM,OACrCL,EAAY,MAKd,SACE,uBAAOM,KAAK,OAAOC,MAAOR,EAAUS,SAjBnB,SAACN,GACpBF,EAAYE,EAAEO,OAAOF,a,QCIVG,EATK,SAAC,GAA4B,EAA1BC,GAA2B,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAChC,OACE,0BAASC,UAAU,oCAAnB,UACE,qBAAKC,IAAKF,EAAUG,IAAKJ,IACzB,4BAAIA,Q,uBCNGK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,0DAC0CC,UAC7DH,GAFmB,gEAMAI,MAAMF,GANN,WAMbG,EANa,QAQTC,GARS,qBAQC,CAAEC,OAAQF,EAAKE,OAAQC,WAAYH,EAAKG,YARzC,uBASAH,EAAKI,OATL,cASbA,EATa,OAWXC,EAASD,EAATC,KAEFC,EAAQD,EAAKE,KAAI,SAACC,GACtB,MAAO,CACLpB,GAAIoB,EAAIpB,GACRC,MAAOmB,EAAInB,MACXC,SAAUkB,EAAIC,OAAOC,iBAAiBb,QAjBvB,kBAqBZS,GArBY,2DAuBZ,CAAC,EAAD,KAvBY,0DAAH,sD,UCuBLK,EArBA,WACb,OACE,qBAAKpB,UAAU,mBAAf,SACE,sBAAKA,UAAU,cAAf,UACE,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,8BCcOqB,EAzBE,SAAC,GAAkB,IAAhBjB,EAAe,EAAfA,SAClB,ECJa,SAAsBA,GACnC,MAA0BpB,mBAAS,CAAE8B,KAAM,GAAIQ,SAAS,EAAMC,MAAO,OAArE,mBAAOC,EAAP,KAAcC,EAAd,KAqBA,OAnBAC,qBAAU,WACRvB,EAAQC,GACLuB,MAAK,SAACV,GAELQ,EAAS,CACPX,KAAMG,EACNK,SAAS,EACTC,OAAO,OAGVK,OAAM,SAACC,GACNJ,EAAS,CACPX,KAAM,GACNQ,SAAS,EACTC,MAAOM,SAGZ,CAACzB,IAEGoB,EDlBkCM,CAAa1B,GAAxCc,EAAd,EAAQJ,KAAcQ,EAAtB,EAAsBA,QAAtB,EAA+BC,MAM/B,OACE,qCACE,oBAAIvB,UAAU,8CAAd,SACGI,IAEFkB,GAAW,cAAC,EAAD,IACZ,0BAAStB,UAAU,WAAnB,WACIkB,GAAU,iEACXA,GAAUA,EAAOF,KAAI,SAACC,GAAD,OAAS,cAAC,EAAD,eAA8BA,GAAZA,EAAIpB,cEK9CkC,EAtBM,WACnB,MAAoC/C,mBAAS,CAAC,iBAA9C,mBAAOgD,EAAP,KAAmBjD,EAAnB,KAOA,OACE,gCACE,gDACA,uDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,+BACGiD,GACCA,EAAWhB,KAAI,SAACzB,GAAD,OAAU,cAAC,EAAD,CAAqBa,SAAUb,GAAhBA,YCRnC0C,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OACP,mCACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.b9b12a1b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\"; // ES6\r\nconst AddCategory = ({ setCategories }) => {\r\n  const [busqueda, setBusqueda] = useState(\"\"); //para que me evite los warning wey que esto s eejecuta al mover llas categorias\r\n\r\n  //actualizando el estado\r\n  const handleChange = (e) => {\r\n    setBusqueda(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    //si la bisqeuda realizada es mayor que 2\r\n    //actualizare la lista de categorias con el estado de ,o aplicacion mi pana y esto mediante esta callback que recibe el estado y asi me evito pasa r la categora\r\n    if (busqueda.length > 2) {\r\n      setCategories((cate) => [busqueda,...cate]);\r\n      setBusqueda(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={busqueda} onChange={handleChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddCategory;\r\n","import React from \"react\";\r\n\r\nconst GifGridItem = ({ id, title, imageUrl }) => {\r\n  return (\r\n    <article className=\"animate__animated animate__fadeIn\">\r\n      <img src={imageUrl} alt={title} />\r\n      <p>{title}</p>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default GifGridItem;\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?limit=12&q=${encodeURI(\r\n    category\r\n  )}}&api_key=9ZuHTMXPKL6WYkg1eo8K9T4WM9bVcK3Y`;\r\n\r\n  try {\r\n    const resp = await fetch(url);\r\n\r\n    if (!resp.ok) throw { status: resp.status, statusText: resp.statusText };\r\n    const json = await resp.json();\r\n\r\n    const { data } = json;\r\n\r\n    const image = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        imageUrl: img.images.downsized_medium.url,\r\n      };\r\n    });\r\n\r\n    return image;\r\n  } catch (error) {\r\n    return [error];\r\n  }\r\n};\r\n","import React from 'react';\r\nimport \"./Loader.css\"\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"lds-spinner\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loader;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\"; // ES6\r\nimport GifGridItem from \"./GifGridItem\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\nimport useFetchGift from \"../hooks/useFetchGift\";\r\nimport Loader from \"./Loader\";\r\nconst GridGifs = ({ category }) => {\r\n  const { data: images, loading, error } = useFetchGift(category);\r\n\r\n  //para que esta wea solo se renderize una vez que inicie la aplicacion ya que cada ve z que el estado cambia sse renderiza la aplciacion y por ende todo se vuelce a ejecutar hasta la ejecucio de ña funcion\r\n\r\n  //usuare el useEfec y por ende no quiero todo la informacion xd\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"title animate__animated animate__backInLeft\">\r\n        {category}\r\n      </h3>\r\n      {loading && <Loader />}\r\n      <section className=\"grid-gif\">\r\n        {!images && <p>No hay resultados en tu busqueda</p>}\r\n        {images && images.map((img) => <GifGridItem key={img.id} {...img} />)}\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nGridGifs.propTypes = {\r\n  category: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default GridGifs;\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport default function useFetchGift(category) {\r\n  const [state, setState] = useState({ data: [], loading: true, error: null });\r\n\r\n  useEffect(() => {\r\n    getGifs(category)\r\n      .then((img) => {\r\n        //aca yo voy a utilizar este customHook para poder hacer las peticiones y lñimpíar mi componente\r\n        setState({\r\n          data: img,\r\n          loading: false,\r\n          error: false,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        setState({\r\n          data: [],\r\n          loading: false,\r\n          error: err,\r\n        });\r\n      });\r\n  }, [category]);\r\n\r\n  return state; //reornare el estado que s actualizara cada vez que la categoria cambie\r\n  //mediante los customHooks yo puedo utilizar los hooks y no renderizaran nada;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport AddCategory from \"./AddCategory\";\r\nimport GridGifs from \"./GridGifs\";\r\n\r\nconst GitExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"cheeseburger\"]);\r\n  //crear una grilla por cada cateroria\r\n  // const handleCategorie = (e) => {\r\n  //   let cate = prompt(\"Agrega otra categoria\");\r\n  //   setCategories([cate, ...categories]);\r\n  // };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Git Expert App</h2>\r\n      <h4>Agregar una categoria</h4>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n      <main>\r\n        {categories &&\r\n          categories.map((cate) => <GridGifs key={cate} category={cate} />)}\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GitExpertApp;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GitExpertApp from \"./components/GitExpertApp\";\nimport \"./index.css\"\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <>\n    <GitExpertApp />\n  </>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}